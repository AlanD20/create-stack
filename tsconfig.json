{
  "compilerOptions": {
    /* LANGUAGE COMPILATION OPTIONS */
    "target": "ESNext",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "Node16",
    "moduleResolution": "nodenext",
    "resolveJsonModule": true,

    "outDir": "./dist",
    "rootDir": ".",
    "noEmit": true, // `tsdx build` ignores this option, but it is commonly used when type-checking separately with `tsc`
    "allowJs": false,

    /* TYPE CHECKING RULES */
    "strict": true, // stricter type-checking for stronger correctness. Recommended by TS
    // "noImplicitAny": true, // Included in "Strict"
    // "noImplicitThis": true, // Included in "Strict"
    // "strictBindCallApply": true, // Included in "Strict"
    // "strictFunctionTypes": true, // Included in "Strict"
    // "strictNullChecks": true, // Included in "Strict"
    // "strictPropertyInitialization": true, // Included in "Strict"
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "useUnknownInCatchVariables": true,
    "noUncheckedIndexedAccess": true, // TLDR - Checking an indexed value (array[0]) now forces type <T | undefined> as there is no confirmation that index exists

    // THE BELOW ARE EXTRA STRICT OPTIONS THAT SHOULD ONLY BY CONSIDERED IN VERY SAFE PROJECTS
    // "exactOptionalPropertyTypes": true, // TLDR - Setting to undefined is not the same as a property not being defined at all
    // "noPropertyAccessFromIndexSignature": true, // TLDR - Use dot notation for objects if youre sure it exists, use ['index'] notaion if unsure

    /* OTHER OPTIONS */
    "allowSyntheticDefaultImports": true,
    // "emitDecoratorMetadata": true,
    // "experimentalDecorators": true,
    "skipLibCheck": true, // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
    "esModuleInterop": true, // interop between ESM and CJS modules. Recommended by TS
    "useDefineForClassFields": true,
    // change it to true, if you want stricter checkng.
    // error out if import and file system have a casing mismatch. Recommended by TS
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true, // use Node"s module resolution algorithm, instead of the legacy TS one
    "jsx": "react", // transpile JSX to React.createElement

    "baseUrl": "./",
    "paths": {
      "~/*": ["src/*"],
      "stubs/*": ["stubs/*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "bin"]
}
